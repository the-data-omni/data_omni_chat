const r="githubRAGConfig";function i(n){if(!n)return null;try{const e=[/^https?:\/\/github\.com\/([^\/]+)\/([^\/\s\.]+)(?:\.git)?\/?$/i,/^git@github\.com:([^\/]+)\/([^\/\s\.]+)(?:\.git)?$/i];for(const o of e){const t=n.match(o);if(t&&t[1]&&t[2])return{owner:t[1],repoName:t[2]}}}catch(e){console.error("Error parsing repo URL:",n,e)}return console.warn("Could not parse owner and repoName from URL:",n),null}function c(){if(typeof window>"u")return null;const n=localStorage.getItem(r);if(!n)return console.log("No GitHub config found in localStorage."),null;try{const e=JSON.parse(n),o=i(e.repoUrl);if(!e.pat||!e.repoUrl)return console.warn("Stored GitHub config is missing PAT or Repository URL."),{...e,owner:(o==null?void 0:o.owner)||null,repoName:(o==null?void 0:o.repoName)||null,isConfigured:!1};const t=!!(e.pat&&(o!=null&&o.owner)&&(o!=null&&o.repoName)&&e.schemaFileName&&e.qqFileName&&e.branch);return(!(o!=null&&o.owner)||!(o!=null&&o.repoName))&&console.warn("Could not extract owner/repoName from stored repoUrl:",e.repoUrl),{...e,owner:(o==null?void 0:o.owner)||null,repoName:(o==null?void 0:o.repoName)||null,isConfigured:t}}catch(e){return console.error("Failed to parse stored GitHub config:",e),localStorage.removeItem(r),null}}export{c as g};
